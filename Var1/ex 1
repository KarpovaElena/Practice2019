#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace cv;
using namespace std;

Mat src; Mat src_gray;
int thresh = 100;
int max_thresh = 255;
RNG rng(12345);

/// Function header
void thresh_callback(int, void*);

int main()
{
	/// Load source image and convert it to gray
	Mat src = imread("../data/road.jpg", 1);

	/// Convert image to gray and blur it
	cvtColor(src, src_gray, COLOR_RGB2GRAY);
	blur(src_gray, src_gray, Size(3, 3));

	/// Create Window
	const char* start_window = "Start";
	namedWindow(start_window, WINDOW_AUTOSIZE);
	imshow(start_window, src);

	createTrackbar(" Canny thresh:", "Start", &thresh, max_thresh, thresh_callback);
	thresh_callback(0, 0);

	waitKey(0);
	return(0);
}


void thresh_callback(int, void*)
{
	Mat canny_output;
	vector<vector<Point> > contours; // memory for contours
	vector<Vec4i> hierarchy; // pointer for the first item

	// Detect edges using canny
	Canny(src_gray, canny_output, thresh, thresh * 2, 3); /* grayscale processing, border storage, min 100, max 200, image brightness gradient*/
	/// Find contours
	findContours(canny_output, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

	/// Get the moments
	vector<Moments> mu(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mu[i] = moments(contours[i], false);
	}

	///  Get the mass centers:
	vector<Point2f> mc(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mc[i] = Point2f(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);
	}

	/// Draw contours
	Mat drawing = Mat::zeros(canny_output.size(), CV_8UC3);
	for (int i = 0; i < contours.size(); i++)
	{
		Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));
		drawContours(drawing, contours, i, color, 2, 8, hierarchy, 0, Point());
		circle(drawing, mc[i], 4, color, -1, 8, 0);
	}

	/// Show in a window
	namedWindow("Contours_new", WINDOW_AUTOSIZE);
	imshow("Contours_new", drawing);

	/// Calculate the area with the moments 00 and compare with the result of the OpenCV function
	printf("\t Info: Centre and Contour Length \n");
	for (int i = 0; i < contours.size(); i++)
	{
		printf(" * Contour[%d] ; Centre (M_00) = %.2f ; Centre OpenCV = %.2f - Length = %.2f \n", i, mu[i].m00, contourArea(contours[i]), arcLength(contours[i], true));
		Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));
		drawContours(drawing, contours, i, color, 2, 8, hierarchy, 0, Point());
		circle(drawing, mc[i], 4, color, -1, 8, 0);
	}
}
